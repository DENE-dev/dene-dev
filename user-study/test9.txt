input: acq4@acq4/acq4/util/clibrary/CParser.py 
output: Literal mod.CParser.removeComments line 358

#1
"""
CParser.py - C parsing library 
Copyright 2010  Luke Campagnola
Distributed under MIT/X11 license. See license.txt for more infomation.

Used for extracting data such as macro definitions, variables, typedefs, and function
signatures from C files (preferrably header files).
"""
from __future__ import print_function
import json
import os
import re
import sys
import six
from six.moves import range
__all__ = ['winDefs', 'CParser']
def winDefs(verbose=False, architecture=None):...
def set_default(obj):...
class CParser:...
hasPyParsing = False
try:
#31
"""Class for parsing C code to extract variable, struct, enum, and function declarations as well as preprocessor macros. This is not a complete C parser; instead, it is meant to simplify the process
    of extracting definitions from header files in the absence of a complete build system. Many files 
    will require some amount of manual intervention to parse properly (see 'replace' and extra arguments 
    to __init__)
    
    Usage:
        ## create parser object, load two files
        p = CParser(['header1.h', 'header2.h'])
        
        ## remove comments, preprocess, and search for declarations
        p.processAll()
        
        ## just to see what was successfully parsed from the files
        p.printAll() 
        
        ## access parsed declarations 
        allValues = p.defs['values']
        functionSignatures = p.defs['functions']
        ...
        
        ## To see what was not successfully parsed:
        unp = p.processAll(returnUnparsed=True)
        for s in unp:
            print(s)
    """
cacheVersion = 22
def __init__(self, files=None, replace=None, copyFrom=None, processAll=True,...
def processAll(self, cache=None, returnUnparsed=False, printAfterPreprocess...
def loadCache(self, cacheFile, checkValidity=False):...
def importDict(self, data, order):...
def writeCache(self, cacheFile):...
def loadFile(self, file, replace=None):...
def assertPyparsing(self):...
def removeComments(self, file):...
def preprocess(self, file):...
def evalPreprocessorExpr(self, expr):...
def processMacroDefn(self, t):...
def compileFnMacro(self, text, args):...
def expandMacros(self, line):...
def expandFnMacro(self, name, text):...
def parseDefs(self, file, returnUnparsed=False):...
def buildParser(self):...
def processDeclarator(self, decl):...
def processType(self, typ, decl):...
def processEnum(self, s, l, t):...
def processFunction(self, s, l, t):...
def packingAt(self, line):...
def processStruct(self, s, l, t):...
def processVariable(self, s, l, t):...
def processTypedef(self, s, l, t):...
def evalExpr(self, toks):...
def eval(self, expr, *args):...
def printAll(self, file=None):...
def addDef(self, typ, name, val):...
def remDef(self, typ, name):...
def isFundType(self, typ):...
def evalType(self, typ):...
def find(self, name):...
def findText(self, text):...
#180
"""Remove all comments from file. (operates in memory; does not alter the original files)"""
self.assertPyparsing()
text = self.files[file]
cplusplusLineComment = Literal('//') + restOfLine
self.files[file] = (quotedString | cStyleComment.suppress() |
    cplusplusLineComment.suppress()).transformString(text)

